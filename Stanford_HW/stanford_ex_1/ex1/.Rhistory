data("swiss")
head(swiss)
install.packages("GGally")
library(GGally)
library(GGally)
install.packages("GGally")
install.packages("grid")
q()
install.packages("grid")
q()
install.packages("GGally")
library(GGally)
library(datasets)
data("swiss")
library(ggplot2)
ggpairs(swiss)
?resid
n <- 100; x2 <- 1 : n; x1 <- .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
dat = data.frame(y = y, x1 = x1, x2 = x2, ey = resid(lm(y ~ x2)), ex1 = resid(lm(x1 ~ x2)))
names(dat)
with(dat, plot(ey~ex1))
with(dat, plot(ey~y))
with(dat, plot(ey~ex1))
?relevle
?relevel
rm(list=ls())
library(data.table)
install.packages("data.table")
library(data.table)
?setnames
?gsub
q()
?xlis
ylis
?ylis
??ylis
library(ggplot2)
?qqline
?qqnorm
?xtable
??xtable
library(latticee)
library(lattice
)
??xtable
?xtable
?mean
q()
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Linear Regression")
install_from_swirl("Regression Models")
swirl()
q()
library(datasets)
data(mtcars)
lapply(mtcars$cyl, function(x) {
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
mtcars
mtcars$cyl <- factor(mtcars$cyl)
mtcars$cyl
for(lev in mtcars$cyl){print(lev)}
lapply(mtcars$cyl, function(x) {print(x)})
?brewer.pal
library(ggplot2)
?brewer.pal
install.packages("RColorBrewer")
swirl()
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cor(fit$residuals, galton$parent)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.ic <- fit$coef[2]
ols.slope <- fit$coef[2]
ols.ic <- fit$coef[1]
options
options(editor="internal")
swirl()
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(regrLine)
varEst <- var()
varEst <- var(ols.slope*galton$parent + ols.ic)
varEst <- var(est( ols.slope, ols.ic ))
all.equal(varChild, varRes + varEst)
efit <- lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor,galton)
l_nor <- lm(gch_nor~gpa_nor)
install.packages("usingR")
install.packages("UsingR")
library(UsingR)
head(galton)
y <- galton$child
x <- galton$parent
plot(y~x, galotn)
plot(y~x, galton)
?lines
fit <- lm(y~x, galton)
abline(fit)
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x), sd(y) / sd(x) * cor(y, x), lwd = 2, col = "red")
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x), sd(y) / cor(y, x) / sd(x), lwd = 2, col = "blue")
abline(mean(y) - mean(x) * sd(x) * cor(y,x) / sd(y), sd(x) * cor(y,x) / sd(y), lwd = 2, col = "green")
summary(fit)
swirl()
fit <- lm(child~parent, galton)
sqrt(sum((fit$residuals)^2)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
?deviance
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mean(galton$child))^2)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(lm(child~parent, galton))
sRes <- deviance(fit))
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones -1, galton)
lm(child~parent, galton)
lm(child~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit,fit2),coef)
q()
library(ggplot2)
?geom_smooth
?geom_hex
install.packages("hexbin")
library(hexbin)
library(datasets)
data("seals")
dim(seals)
names(seals)
head(seals)
summary(seals)
hexbinplot(lat~long, data = seals)
count(seals$lat)
library(plyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
count(seals, lat, long)
data("diamonds")
names(diamonds)
count(diamonds, carat, price)
dim(diamonds)
hexbinplot(data = diamonds, x = carat, y = price)
hexbinplot(price~carat,data = diamonds)
?mean_cl_normal
?quantile
x <- 1:100
Z <- quantile(x)
Z
length(Z)
Z[1]
?hist
?log
data(mtcars)
model <- lm(mtcars, mpg ~ I(as.factor(cyl)) + wt)
mtcars$cyl <- factor(mtcars$cyl)
model <- lm(mtcars, mpg ~ cyl + wt)
model <- lm(mtcars, formula =  mpg ~ cyl + wt)
summary(model)
other_model <- lm(data=mtcars, formula = mpg~cyl)
summary(other_model)
library(ggplot2)
ggplot(data=mtcars, aes(x=cyl, y = mpg))
ggplot(data=mtcars, aes(x=cyl, y = mpg)) + geom_point()
ggplot(data=mtcars, aes(x=cyl, y = mpg)) + geom_jitter(width = .1)
other_model$coefficients
model$coefficients
ggplot(data=mtcars, aes(x=cyl, y = mpg, col = cyl)) + geom_jitter(width = .1) + geom_smooth(method="lm", aes(formula = mpg ~ cyl + wt))
ggplot(data=mtcars, aes(x=cyl, y = mpg, col = cyl)) + geom_jitter(width = .1)
ggplot(data=mtcars, aes(x=cyl, y = mpg, col = cyl)) + geom_jitter(width = .1) + geom_abline(slope = model$coefficients[1], intercept = model$coefficients[4])
new_model <- lm(data = mtcars, formula = mpg ~ I(interaction(cyl, wt)))
summary(new_model)
newer_model <- lm(data = mtcars, formula = mpg ~ cyl + wt + I(interaction(cyl, wt)))
summary(newer_model)
model
new_model
3.4e+00
MODEL <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
MODEL
?mtcars
q()
library(datasets)
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
model <- lm(data = mtcars, formula = mpg ~ cyl + wt )
summary(model)
unadjusted_model <- lm(formula = mpg ~ cyl, data = mtcars)
summary(unadjusted_model)
install.packages("lmtest")
library(lmtest)
interaction_model <- lm(data = mtcars, formula = mpg ~ interaction(cyl, wt))
lrtest(interaction_model, model)
lrtest(model, interaction_model)
summary(interaction_model)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
df <- data.frame(x=x, y=y)
Z <- lm(data = df, formula = y~x)
Z
influence.measures(Z)
influence(Z)
influence.measures(Z)
library(swirl)
swirl()
swirl()
ravenData
0
quit()
library(swirl)
swirl()
ravenData
mdl <- glm(formula = ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore = c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
info()
bye()
install.packages("MASS")
install.packages("MASS")
library(MASS)
MASS(shuttle)
MASS
MASS:shuttle
library(MASS)
shuttle
my_shuttle <- shuttle
names(shuttle)
my_shuttle$NumUse <- as.factor(my_shuttle$use, levels = c(1,0))
my_shuttle$NumUse <- factor(my_shuttle$use, levels = c(1,0))
my_shuttle$NumUse
my_shuttle$NumUse <- factor(my_shuttle$use, levels = c(1,0), labels = c("auto","noauto"))
my_shuttle$NumUse
my_shuttle$NumUse <- NULL
names(my_shuttle)
my_shuttle$NumUse <- rep(NA, nrow(my_shuttle))
for(i in 1:nrow(my_shuttle)) {ifelse(my_shuttle$use[i] == "auto", my_shuttle$NumUse[i] <- 1, my_shuttle$NumUse[i] <- 0)}
my_shuttle$NumUse
table(my_shuttle$NumUse,my_shuttle$use)
use_wind_glm <- glm(data = my_shuttle, family = "binomial", formula = NumUse ~ wind)
summary(use_wind_glm)
table(my_shuttle$wind)
coef(use_wind_glm)[1,1]
coef(use_wind_glm)
head_wind <- coef(use_wind_glm)[1]
tail_wind <- coef(use_wind_glm)[2]
table(my_shuttle$NumUse)
odds_of_auto <- 145/111
exp(head_wind) / exp(tail_wind)
exp(head_wind) / exp(tail_wind + head_wind)
table(my_shuttle$wind, my_shuttle$NumUse)
use_wind_spd_glm <- glm(data = my_shuttle, family = "binomial", formula = NumUse ~ wind + mgn)
use_wind_spd_glm <- glm(data = my_shuttle, family = "binomial", formula = NumUse ~ wind + magn)
summary(use_wind_spd_glm)
coef(use_wind_spd_glm)
head_adj <- coef(use_wind_spd_glm)[1]
tail_adj <- coef(use_wind_spd_glm)[2]
exp(head_adj) / (exp(head_adj) + exp(tail_adj))
use_wind_spd_Cross <- glm(data = my_shuttle, family = "binomial", formula = NumUse ~ wind * magn)
summary(use_wind_spd_Cross)
rev_use_wind_glm <- glm(family = "binomial", data = my_shuttle, formula = NumUse ~ I(1- wind))
rev_use_wind_glm <- glm(family = "binomial", data = my_shuttle, formula = NumUse ~ I(as.factor(1- as.numeric(wind))))
summary(rev_use_wind_glm)
summary(use_wind_glm)
swirl()
library(swirl)
swirl()
rm(list=ls())
swirl()
var(rpois(1000,50))
nxt()
head(hits)
class(hits$date)
as.integer(head(hits[,'date']))
mdl <- glm(visits~data, poisson, hits)
mdl <- glm(visits~data, family = "poisson", data =  hits)
mdl <- glm(formula = visits~data, family = "poisson", data =  hits)
class(data)
class(hits)
mdl <- glm(formula = visits~date, family = "poisson", data =  hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
bye()
library(datasets)
data("euro")
?euro
dim(euro)
data("InsectSprays")
names(InsectSprays)
InsectSprays$spray <- as.factor(InsectSprays$spray)
model <- glm(family = "Poisson", data = InsectSprays, formula = count ~ spray)
model <- glm(family = "poisson", data = InsectSprays, formula = count ~ spray)
summary(model)
?offset
mtcars
model <- glm(family = "binomial", data = mtcars, formula = am ~ mpg)
model
model <- glm(family = "binomial", data = mtcars, formula = I(as.factor(am) ~ mpg)
)
model
plot(data = mtcars, formula = mpg~am)
plot(mtcars$mpg ~ mtcars$am)
?abline
coef(model)
model <- glm(family = "binomial", data = mtcars, formula = I(mpg ~ as.factor(am))
)
model <- glm(family = "binomial", data = mtcars, formula = (mpg ~ I(as.factor(am))))
model <- glm(family = "binomial", data = mtcars, formula = (mpg ~ I(as.factor(am))))
model <- glm(family = "binomial", data = mtcars, formula = am ~ mpg)
plot(mtcars$am ~ mtcars$mpg)
abline(a = coef(model)[1], b = coef(model)[2])
?prop.table
install.packages("rpart")
librar(rpart)
library(rpart)
install.packages("rpart.plot")
library(rpart.plot)
?fancyRpartPlot
?rpart
?test
q()
q()
q()
?train
library(caret)
library(combinat)
combn(1:21,3)
q()
exp(-5)
q()
q()
dir()
setwd("MatLab_Scripts")
dir()
setwd("stanford_ex_1")
dir()
setwd("ex1")
dir
dir()
source("gRadient_descent.R")
source("gRadient_descent.R")
food_truck_model
housing_model
food_truck_model$coefficients
food_truck_model$coefficients[1,1]
source("gRadient_descent.R")
plot(x = food_truck_data$Population, y = (food_truck_intercept + (food_truck_data$Population)*food_truck_population_coef))
plot(x = food_truck_data$Population, y = (food_truck_intercept + (food_truck_data$Population)*food_truck_population_coef), col= "red")
?points
plot(x = food_truck_data$Population, y = (food_truck_intercept + (food_truck_data$Population)*food_truck_population_coef), col= "red", type = "l")
lines(x = food_truck_data$Population, y = food_truck_data$Profit)
plot(x = food_truck_data$Population, y = (food_truck_intercept + (food_truck_data$Population)*food_truck_population_coef), col= "red", type = "l")
points(x = food_truck_data$Population, y = food_truck_data$Profit)
matrix(data = 1:194, nrow = 97)
class(food_truck_data$Population)
source("gRadient_descent.R")
Design_Matrix_Food
Target_Vector
source("gRadient_descent.R")
length(Design_Matrix_Food %*% Parameter_Vector)
(Design_Matrix_Food %*% Parameter_Vector)
(Design_Matrix_Food %*% Parameter_Vector) - Target_Vector
((Design_Matrix_Food %*% Parameter_Vector) - Target_Vector)^2
t(Design_Matrix_Food %*% Parameter_Vector)
dim(t(Design_Matrix_Food %*% Parameter_Vector))
t(Design_Matrix_Food %*% Parameter_Vector - Target_Vector)%*%Design_Matrix_Food
Parameter_Vector -  t(Design_Matrix_Food %*% Parameter_Vector - Target_Vector)%*%Design_Matrix_Food
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
Design_Matrix_Food * Parameter_Vector
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
food_truck_grad_descent$history
food_truck_grad_descent$history[1,2]
food_truck_grad_descent$history[c(1:5,1495:1500)]
food_truck_grad_descent$parameters
food_truck_intercept
food_truck_population_coef
lines(x = food_truck_data$Population, y = food_truck_data$Population * food_truck_grad_descent$parameters[2,1] + food_truck_grad_descent$parameters[1,1])
plot(x=1:1500,y=food_truck_grad_descent$history)
length(food_truck_grad_descent$history)
source("gRadient_descent.R")
length(food_truck_grad_descent$history)
plot(x=1:1500,y=food_truck_grad_descent$history)
system_error <- get_squared_error(Design_Matrix_Food,c(food_truck_intercept,food_truck_population_coef), Target_Vector)
Damian_error <- get_squared_error(Design_Matrix_Food, c(food_truck_grad_descent$parameters[1,1],food_truck_grad_descent$parameters[2,1]),Target_Vector)
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
Damian_error <- get_squared_error(Design_Matrix_Food, c(food_truck_grad_descent$parameters[1,1],food_truck_grad_descent$parameters[2,1]),Target_Vector)
food_truck_grad_descent$parameters
housing_model
housing_data$Bedrooms
source("gRadient_descent.R")
plot(x = 1:3000, y = housing_descent$history)
length(housing_descent$history)
source("gRadient_descent.R")
length(housing_descent$history)
source("gRadient_descent.R")
plot(x = 1:3000, y = housing_descent$history)
housing_descent$parameters
house_design_matrix
house_target
source("gRadient_descent.R")
source("gRadient_descent.R")
housing_descent$parameters
housing_descent$history[1:5]
source("gRadient_descent.R")
housing_descent$history[1:5]
housing_descent$history[1:5]
source("gRadient_descent.R")
housing_descent$history[1:5]
source("gRadient_descent.R")
housing_descent$history[1:5]
source("gRadient_descent.R")
source("gRadient_descent.R")
housing_descent$history[1:5]
housing_descent$history[2995:3000]
housing_descent$parameters
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
housing_descent$parameters
sd
source("gRadient_descent.R")
housing_descent$parameters
source("gRadient_descent.R")
source("gRadient_descent.R")
source("gRadient_descent.R")
housing_descent$parameters
predicted_prices_normalized <- housing_descent$parameters[1,1] + housing_descent$parameters[2,1] * normalized_area + housing_descent$parameters[3,1] * housing_data$Bedrooms
predicted_prices <- predicted_prices_normalized * sd(housing_data$Price) + mean(housing_data$Price)
Damian_Error <- ((predicted_prices - housing_data$Price)^2)/94
System_Predictions <- housing_intercept + housing_area_coef*housing_data$Area + housing_bedroom_coef*housing_data$Bedrooms
System_Error <- ((System_Predictions - housing_data$Price)^2)/94
System_Error
sum(System_Error)
sum(Damian_Error)
?predict
housing_data[-Price]
housing_data[,-Price]
predict(housing_model, newdata  = c(housing_data$Area,housing_data$Bedrooms))
predict(lm(data = housing_data, formula = Price ~ Area + Bedrooms), newdata  = c(housing_data$Area,housing_data$Bedrooms))
Howss <- lm(data = housing_data, formula = Price ~ Area + Bedrooms)
prediction_data <- data.frame(c(housing_data$Area,housing_data$Bedrooms)
)
prediction_data <- data.frame(housing_data$Area,housing_data$Bedrooms)
head(prediction_data)
comp_predict <- predict(Howss,prediction_data)
prediction_data <- data.frame(Area = housing_data$Area,Bedrooms = housing_data$Bedrooms)
comp_predict <- predict(Howss,prediction_data)
prediction_data == System_Predictions
prediction_data
comp_predict == System_Predictions
source("gRadient_descent.R")
source("gRadient_descent.R")
HDM <- matrix(data = c(rep(1,47),housing_data$Area,housing_data$Bedrooms),nrow=47)
HP <- c(0,0,0)
HT <- housing_data$Price
solution <- solve(t(HDM)%*%HDM)%*%t(HDM)%*%HT
q()
